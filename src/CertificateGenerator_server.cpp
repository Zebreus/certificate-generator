// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <string>
#include <sstream>
#include <iostream>
#include <fstream>
#include "Student.hpp"
#include "TemplateCertificate.hpp"
#include "Certificate.hpp"
#include "Batch.hpp"
#include <nlohmann/json.hpp>

#include "thrift/CertificateGenerator.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::CertificateGeneratorThrift;
using json = nlohmann::json;


class CertificateGeneratorHandler : virtual public CertificateGeneratorIf {
 public:
  CertificateGeneratorHandler() {
    // Your initialization goes here
  }

  void generateCertificate(std::string& _return, const std::string& n1) {
	stringstream input;
	input.str(n1);
    json batchConfiguration;
    try{
		batchConfiguration = json::parse(input);
	}catch(const nlohmann::detail::parse_error& error){
		InvalidConfiguration thriftError;
		thriftError.message = error.what();
		cerr << "Invalid json in batch config: " << endl;
		throw thriftError;
	}
	
	Batch batch(batchConfiguration);
	
	cout << "Executing Batch" << endl;
	batch.executeBatch();
	cout << "All done" << endl;
	
	//_return = batch.getOutputFiles()[0];
	
	stringstream content;
	ifstream pdfFile(batch.getOutputFiles()[0] , ios::in | ios::binary);
	content << pdfFile.rdbuf();
	pdfFile.close();
	_return = content.str();
	
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<CertificateGeneratorHandler> handler(new CertificateGeneratorHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new CertificateGeneratorProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

